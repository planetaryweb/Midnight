{{- $color := partial "css/color/parse_color" $.Site.Params.color -}}

:root {
    --color-bg-page: {{ $color.Page.Background | partial "utils/color/to_str" }};
    --color-bg-main: {{ $color.Main.Background | partial "utils/color/to_str" }};
    --color-bg-alt: {{ $color.Alt.Background | partial "utils/color/to_str" }};
    --color-bg-accent: {{ $color.Accent.Background | partial "utils/color/to_str" }};
    
    --color-fg-main: {{ $color.Main.Text | partial "utils/color/to_str" }};
    --color-fg-alt: {{ $color.Alt.Text | partial "utils/color/to_str" }};
    --color-fg-accent: {{ $color.Accent.Text | partial "utils/color/to_str" }};
    
    --color-bg-alt-transparent: {{ $color.Alt.Background | partial "utils/color/semi_transparent" | partial "utils/color/to_str" }};
    --color-fg-alt-transparent: {{ $color.Alt.Text | partial "utils/color/semi_transparent" | partial "utils/color/to_str" }};
    --color-bg-accent-transparent: {{ $color.Accent.Background | partial "utils/color/semi_transparent" | partial "utils/color/to_str" }};
    --color-bg-alert: {{ dict "Color" $color.Accent.Background "Alpha" 0.2 | partial "utils/color/semi_transparent" | partial "utils/color/to_str" }};
    --color-bg-code: {{ dict "Color" $color.Accent.Background "Alpha" 0.2 | partial "utils/color/semi_transparent" | partial "utils/color/to_str" }};

    {{  $mainHSL   := $color.Main.Background   | partial "utils/color/to_hsl" -}}
    {{- $altHSL    := $color.Alt.Background    | partial "utils/color/to_hsl" -}}
    {{- $accentHSL := $color.Accent.Background | partial "utils/color/to_hsl" -}}
    {{- $border := dict "Hue" $altHSL.Hue "Saturation" $altHSL.Saturation "Lightness" (div (add $altHSL.Lightness $mainHSL.Lightness) 2.0) "Alpha" 1.0 -}}
    --color-border-main: {{ $border | partial "utils/color/to_rgb" | partial "utils/color/to_str" }};
    {{ $border := dict "Hue" $altHSL.Hue "Saturation" $altHSL.Saturation "Lightness" (div (add $altHSL.Lightness $accentHSL.Lightness) 2.0) "Alpha" 1.0 -}}
    --color-border-nav: {{ $border | partial "utils/color/to_rgb" | partial "utils/color/to_str" }};
    {{ $border := dict "Hue" $mainHSL.Hue "Saturation" $mainHSL.Saturation "Lightness" (div (add $mainHSL.Lightness $accentHSL.Lightness) 2.0) "Alpha" 1.0 -}}
    --color-border-header: {{ $border | partial "utils/color/to_rgb" | partial "utils/color/to_str" }};

    {{ $lightness := $accentHSL.Lightness -}}
    {{- if partial "utils/color/is_dark" $color.Main.Background -}}
        {{- $lightness = add $lightness 15.0 -}}
        {{- if gt $lightness 100.0 -}}
            {{- $lightness = 100.0 -}}
        {{- end -}}
    {{- else -}}
        {{- $lightness = sub $lightness 15.0  -}}
        {{- if lt (.Scratch.Get "lightness") 0.0 -}}
        {{- .Scratch.Set "lightness" 0.0 -}}
        {{- end -}}
    {{- end -}}
    {{- $alert := dict "Hue" $accentHSL.Hue "Saturation" $accentHSL.Saturation "Lightness" $lightness "Alpha" $accentHSL.Alpha }}
    --color-fg-alert-link: {{ $alert | partial "utils/color/to_rgb" | partial "utils/color/to_str" }};
    
    {{- $bglg := "" -}}
    {{- $bgmd := "" -}}
    {{- $bgsm := "" -}}
    {{- with $.Site.Params.background.src -}}
        {{- $bglg = . -}}
        {{- $bgmd = . -}}
        {{- $bgsm = . -}}
    {{- end -}}
    {{- with $.Site.Params.background.medium_src -}}
        {{- $bgmd = . -}}
        {{- $bgsm = . -}}
    {{- end -}}
    {{- with $.Site.Params.background.small_src -}}
        {{- $bgsm = . -}}
    {{- end -}}
    
    {{- with $bglg -}}
        {{- $res := resources.Get . -}}
        {{- if eq "true" (partial "has_suffix" (dict "String" . "Suffixes" (slice "jpg" "jpeg") "CaseSensitive" false)) -}}
            {{- $res = $res.Resize (printf "%dx%d" $res.Width $res.Height) -}}
        {{- end -}}
        --image-bg-lg: url("{{ partial "make_link" (dict "URL" $res.RelPermalink "Start" "/css/" "Root" $) }}");
    {{- end -}}
    {{- with $bgmd -}}
        {{- $res := resources.Get . -}}
        {{- if eq "true" (partial "has_suffix" (dict "String" . "Suffixes" (slice "jpg" "jpeg") "CaseSensitive" false)) -}}
            {{- $res = $res.Resize (printf "%dx%d" $res.Width $res.Height) -}}
        {{- end -}}
        --image-bg-md: url("{{ partial "make_link" (dict "URL" $res.RelPermalink "Start" "/css/" "Root" $) }}");
    {{- end -}}
    {{- with $bgsm -}}
        {{- $res := resources.Get . -}}
        {{- if eq "true" (partial "has_suffix" (dict "String" . "Suffixes" (slice "jpg" "jpeg") "CaseSensitive" false)) -}}
            {{- $res = $res.Resize (printf "%dx%d" $res.Width $res.Height) -}}
        {{- end -}}
        --image-bg-sm: url("{{ partial "make_link" (dict "URL" $res.RelPermalink "Start" "/css/" "Root" $) }}");
    {{- end -}}
    
    --font-sans: "Clear Sans", sans-serif;
    --font-slab: "Zilla Slab", "Georgia", "Liberation Serif", serif;
    --font-serif: "Alegreya", "Georgia", "Liberation Serif", serif;
    
    {{- $body_style := lower (default "sans-serif" $.Site.Params.fonts.body_style) -}}
    {{- $header_style := lower (default "sans-serif" $.Site.Params.fonts.header_style) -}}
    {{- if eq $body_style "serif" -}}
    --font-body: var(--font-serif);
    {{- else if eq $body_style "slab-serif" -}}
    --font-body: var(--font-slab);
    {{- else -}}
    --font-body: var(--font-sans);
    {{- end -}}
    {{- if eq $body_style $header_style -}}
    {{- if eq $body_style "serif" -}}
    --font-header: var(--font-serif);
    {{- else if eq $body_style "slab-serif" -}}
    --font-header: var(--font-slab);
    {{- else -}}
    --font-header: var(--font-sans);
    {{- end -}}
    {{- else -}}
    {{- if eq $header_style "serif" -}}
    --font-header: var(--font-serif);
    {{- else if eq $header_style "slab-serif" -}}
    --font-header: var(--font-slab);
    {{- else -}}
    --font-header: var(--font-sans);
    {{- end -}}
    {{- end -}}
    
    {{- if eq $.Site.Params.background.fixed true -}}
    --bg-attach: fixed;
    {{- else -}}
    --bg-attach: local;
    {{- end -}}
    
    {{- with $.Site.Params.background.repeat -}}
        {{- if eq . true -}}
        --bg-repeat: repeat;
        {{- else if ne . false -}}
        --bg-repeat: {{ . }};
        {{- else -}}
        --bg-repeat: no-repeat;
        {{- end -}}
    {{- else -}}
    --bg-repeat: no-repeat;
    {{- end -}}
    
    {{- with $.Site.Params.background.fit -}}
    --bg-size: {{ . }};
    {{- else -}}
    --bg-size: auto;
    {{- end -}}
    
    {{- with $.Site.Params.thumbnail_radius -}}
    --thumbnail-radius: {{ . }};
    {{- else -}}
    --thumbnail-radius: 0;
    {{- end -}}
    
    {{- if $.Site.Params.thumbnail -}}
    --site-header-padding: 5px;
    {{- else -}}
    /* Make title text line up with first menu item if no thumbnail */
    --site-header-padding: 0;
    {{- end -}}
    
    {{- if $.Site.Params.tagline -}}
    --site-title-size: 3rem;
    --site-title-padding-bottom: 0.5rem;
    {{- else -}}
    --site-title-size: 5rem;
    --site-title-padding-bottom: initial;
    {{- end -}}
    
    {{- if $.Site.Params.iubenda.id -}}
    {{ $iubColor := partial "iubenda/color.html" .Site }}
    --color-iubenda: {{ $iubColor }};
    {{- if eq $iubColor "black" -}}
    --color-iubenda-bg-link: rgb(56, 56, 56);
    --color-iubenda-fg-link: #fff;
    --color-iubenda-fg-link-focus: #eee;
    {{- else -}}
    --color-iubenda-bg-link: rgb(255, 255, 255);
    --color-iubenda-fg-link: rgb(89, 99, 109);
    --color-iubenda-border: #d0d0d0 #c3c3c3 #b8b9ba;
    --color-iubenda-fg-link-focus: rgb(51, 51, 51);
    {{- end -}}
    --color-iubenda-bg-container: {{ dict "Color" $color.Alt.Background "Alpha" 0.9 | partial "utils/color/semi_transparent" | partial "utils/color/to_str" }};
    {{- end -}}

    {{- if eq $.Site.Params.fonts.print_body_style "sans-serif" -}}
    --print-font-body: var(--font-sans);
    {{- else if eq $.Site.Params.fonts.print_body_style "slab-serif" -}}
    --print-font-body: var(--font-slab);
    {{- else -}}
    --print-font-body: var(--font-serif);
    {{- end -}}
    
    {{- if eq $.Site.Params.fonts.print_header_style "serif" -}}
    --print-font-header: var(--font-serif);
    {{- else if eq $.Site.Params.fonts.print_header_style "slab-serif" -}}
    --print-font-header: var(--font-slab);
    {{- else -}}
    --print-font-header: var(--font-sans);
    {{- end -}}
}

blockquote {
    /* blockquote uses a "faded" version of the main body font color */
    {{ $mainTxtHSL := $color.Main.Text | partial "utils/color/to_hsl" -}}
    {{- $lightness := $mainTxtHSL.Lightness -}}
    {{- if partial "utils/color/is_dark" $color.Main.Background }}
        {{- $lightness = sub $lightness 15.0 }}
        {{- if lt $lightness 0.0 }}
            {{- $lightness = 0.0 }}
        {{- end }}
    {{- else }}
        {{- $lightness = add $lightness 15.0 }}
        {{- if gt $lightness 100.0 }}
            {{- $lightness = 100.0 }}
        {{- end }}
    {{- end }}
    --color-fg-main-faded: {{ dict "Hue" $mainTxtHSL.Hue "Saturation" $mainTxtHSL.Saturation "Lightness" $lightness "Alpha" $mainTxtHSL.Alpha | partial "utils/color/to_rgb" | partial "utils/color/to_str" }};
}

{{- if or $.Site.Params.fonts.print_body_style $.Site.Params.fonts.print_header_style -}}
@media print {
    {{ if eq $.Site.Params.fonts.print_body_style $.Site.Params.fonts.print_header_style -}}
    body { font-family: var(--print-font-body); }
    {{ end -}}
}
{{- end -}}
